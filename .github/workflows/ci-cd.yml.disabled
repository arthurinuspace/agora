name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: agora
          POSTGRES_DB: agora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov

    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://agora:test_password@localhost:5432/agora_test"
        export REDIS_URL="redis://localhost:6379"
        python database.py

    - name: Run unit tests with coverage
      run: |
        export DATABASE_URL="postgresql://agora:test_password@localhost:5432/agora_test"
        export REDIS_URL="redis://localhost:6379"
        python -m pytest test_agora.py -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black formatter check
      run: black --check .

    - name: Run isort import sorting check
      run: isort --check-only .

    - name: Run flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run mypy type checking
      run: mypy --install-types --non-interactive . || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t agora:${{ github.sha }} .
        docker tag agora:${{ github.sha }} agora:latest

    - name: Test Docker image
      run: |
        docker run -d --name agora-test -p 8000:8000 \
          -e SLACK_BOT_TOKEN=test_token \
          -e SLACK_SIGNING_SECRET=test_secret \
          agora:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop agora-test
        docker rm agora-test

    - name: Save Docker image
      run: |
        docker save agora:${{ github.sha }} | gzip > agora-image.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: agora-image.tar.gz

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < agora-image.tar.gz

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could include:
        # - Deploying to staging server
        # - Running smoke tests
        # - Notifying team of deployment

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < agora-image.tar.gz

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # This could include:
        # - Deploying to production server
        # - Running health checks
        # - Notifying team of deployment

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, docker-build]
    if: always()
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.lint.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        # Add Slack notification here if needed

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Add Slack notification here if needed